const Meeting = require("../../models/MeetingModel");
const Tutor = require("../../models/TutorStudent");
const Student = require("../../models/StudentModel");

const io = require("../../server"); // Import io t·ª´ server.js

const createMeeting = async (req, res) => {
  try {
    const { tutorId, name, description, startTime, endTime } = req.body;

    console.log("üìå Nh·∫≠n request t·∫°o cu·ªôc h·ªçp v·ªõi tutorId:", tutorId);

    // Ki·ªÉm tra tutorId c√≥ t·ªìn t·∫°i kh√¥ng
    if (!tutorId) {
      console.log("‚ùå L·ªói: tutorId kh√¥ng ƒë∆∞·ª£c cung c·∫•p!");
      return res.status(400).json({ error: "Thi·∫øu tutorId!" });
    }

    // Ki·ªÉm tra tutor c√≥ t·ªìn t·∫°i trong DB kh√¥ng
    const tutor = await Tutor.findById(tutorId).populate("students");
    if (!tutor) {
      console.log(`‚ùå L·ªói: Tutor v·ªõi ID ${tutorId} kh√¥ng t·ªìn t·∫°i trong database!`);
      return res.status(404).json({ error: "Tutor kh√¥ng t·ªìn t·∫°i!" });
    }

    console.log("‚úÖ Tutor t√¨m th·∫•y:", tutor);

    // L·∫•y danh s√°ch h·ªçc sinh c·ªßa Tutor
    const studentIds = tutor.students.map((student) => student._id);
    console.log("üìå Danh s√°ch h·ªçc sinh thu·ªôc tutor:", studentIds);

    // T·∫°o cu·ªôc h·ªçp
    const meeting = new Meeting({
      tutorId,
      name,
      description,
      studentIds,
      joinedUsers: studentIds,
      participantType: "Student",
      startTime,
      endTime,
    });

    await meeting.save();
    console.log("‚úÖ Cu·ªôc h·ªçp ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng:", meeting);

    res.status(201).json(meeting);
  } catch (error) {
    console.log("‚ùå L·ªói khi t·∫°o cu·ªôc h·ªçp:", error.message);
    res.status(500).json({ error: error.message });
  }
};


const getMeetingsByUser = async (req, res) => {
  try {
    const { userId, role } = req.params;
    let meetings;

    if (role === "tutor") {
      meetings = await Meeting.find({ tutorId: userId });
    } else if (role === "student") {
      meetings = await Meeting.find({ studentIds: userId });
    } else {
      return res.status(400).json({ error: "Role kh√¥ng h·ª£p l·ªá" });
    }

    res.json(meetings);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};


const joinMeeting = async (req, res) => {
  try {
    const { meetingId } = req.params;
    const { userId } = req.body;
    const meeting = await Meeting.findById(meetingId);

    if (!meeting || !meeting.studentIds.includes(userId)) {
      return res.status(403).json({ error: "Kh√¥ng th·ªÉ tham gia cu·ªôc h·ªçp n√†y" });
    }

    // G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ student trong cu·ªôc h·ªçp
    meeting.studentIds.forEach((studentId) => {
      const studentSocket = onlineUsers[studentId]?.socketId;
      if (studentSocket) {
        io.to(studentSocket).emit("user-joined", { meetingId, userId });
      }
    });

    res.json({ message: "ƒê√£ tham gia cu·ªôc h·ªçp", meeting });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

const getAllMeetings = async (req, res) => {
  try {
    const meetings = await Meeting.find().populate("tutorId", "name").populate("studentIds", "name");
    res.json(meetings);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

const getStudentsByTutor = async (req, res) => {
  try {
    const { tutorId } = req.params;
    const tutor = await Tutor.findById(tutorId);

    if (!tutor) {
      return res.status(404).json({ error: "Tutor kh√¥ng t·ªìn t·∫°i" });
    }

    res.json({ studentIds: tutor.studentId || [] });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

module.exports = {
  createMeeting,
  getMeetingsByUser,
  joinMeeting,
  getAllMeetings,
  getStudentsByTutor, 
};
